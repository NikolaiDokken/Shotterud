{"version":3,"sources":["views/Settings/NameChips.jsx","views/Settings/Settings.jsx","views/Shotterud/Spinner.jsx","index.js","views/Shotterud/Shotterud.jsx"],"names":["theme","createMuiTheme","palette","primary","main","error","color","useStyles","makeStyles","createStyles","root","display","flexWrap","input","margin","spacing","NameChips","props","addName","useCallback","newName","document","querySelector","value","length","names","push","name","selected","setNames","filter","mapName","window","sessionStorage","setItem","JSON","stringify","classes","css","classes1","useEffect","addEventListener","event","key","Grid","container","direction","item","justify","Typography","className","text","variant","ThemeProvider","TextField","style","InputLabelProps","labelProps","cclassName","InputProps","id","label","Button","onClick","row","overflowY","height","map","Chip","toUpperCase","onDelete","handleDelete","Transition","React","forwardRef","ref","Slide","background","backgroundColor","Settings","handleToggle","setOpen","open","location","reload","Dialog","PaperProps","fullScreen","onClose","TransitionComponent","AppBar","position","Toolbar","IconButton","edge","aria-label","padding","width","alignItems","textAlign","Slider","settings","minMaxSec","valueLabelDisplay","step","marks","min","max","onChange","e","setSettings","xs","Select","IconComponent","fill","marginLeft","amtSpinners","target","inputProps","MenuItem","Spinner","spin","users","shuffled","loadout","$","nr","insert_times","duration_time","attr","scrollsize","diff","html","times","shuffle","i","append","Math","round","floor","random","animate","left","children","each","center","innerWidth","this","offset","storedPrevNames","parse","getItem","newPrevNames","undefined","scrollTarget","getElementById","scrollLeft","scrollWidth","arr","temp","index","counter","disableBodyScroll","require","ReactDOM","render","storedNames","storedAmtSpinners","storedMinMaxSec","useState","settingsOpen","setSettingsOpen","randomTime","callback","Promise","resolve","setTimeout","spinnerGenerator","percentage","doubleSpin","trippleSpin","amt","Array","spinner","start","a","right","top","size","empty","marginTop","marginBottom","textTransform","bottom","fontSize"],"mappings":"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","file":"static/js/main.731821be.chunk.js","sourcesContent":["import React, { useEffect, useCallback } from \"react\";\nimport {\n  Chip,\n  Grid,\n  Typography,\n  TextField,\n  Theme,\n  Button\n} from \"@material-ui/core\";\nimport {\n  createMuiTheme,\n  makeStyles,\n  createStyles\n} from \"@material-ui/core/styles\";\n\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#ff3d42\"\n    },\n    error: {\n      main: \"#ff3d42\",\n      color: \"white\"\n    }\n  }\n});\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    input: {\n      color: \"white\"\n    },\n    margin: {\n      margin: theme.spacing(1)\n    }\n  })\n);\n\nexport default function NameChips(props) {\n  const addName = useCallback(() => {\n    const newName = document.querySelector(\"#inputName\").value;\n    if (newName === \"\" || newName.length > 20) return;\n    props.names.push({ name: newName, selected: false });\n    props.setNames(props.names.filter(mapName => true));\n    document.querySelector(\"#inputName\").value = \"\";\n    window.sessionStorage.setItem(\"names\", JSON.stringify(props.names));\n  }, [props]);\n  const classes = props.css;\n  const classes1 = useStyles();\n\n  const handleDelete = name => {\n    props.setNames(props.names.filter(mapName => mapName !== name));\n    window.sessionStorage.setItem(\n      \"names\",\n      JSON.stringify(props.names.filter(mapName => mapName !== name))\n    );\n  };\n\n  useEffect(() => {\n    document.querySelector(\"#inputName\").addEventListener(\n      \"keypress\",\n      function(event) {\n        // Number 13 is the \"Enter\" key on the keyboard\n        if (event.key === \"Enter\") {\n          addName();\n        }\n      },\n      true\n    );\n  }, [addName]);\n\n  return (\n    <Grid container direction=\"column\" spacing={4}>\n      <Grid container item justify=\"center\">\n        <Typography className={classes.text} variant=\"h4\">\n          Add Names\n        </Typography>\n      </Grid>\n      <Grid container item justify=\"center\">\n        <ThemeProvider theme={theme}>\n          <TextField\n            error\n            input={{ style: { color: \"#fff\" } }}\n            InputLabelProps={{\n              style: { color: \"white\" }\n            }}\n            labelProps={{\n              cclassName: classes1.input\n            }}\n            InputProps={{\n              className: classes1.input\n            }}\n            id=\"inputName\"\n            label=\"Add name\"\n          ></TextField>\n          <Button\n            className={classes.text}\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={addName}\n          >\n            Add\n          </Button>\n        </ThemeProvider>\n      </Grid>\n      <Grid\n        container\n        item\n        direction\n        row\n        justify=\"center\"\n        style={{ overflowY: \"scroll\", height: \"25vh\" }}\n      >\n        {props.names.map(name => (\n          <Chip\n            label={name.name.toUpperCase()}\n            onDelete={() => handleDelete(name)}\n            color=\"primary\"\n          />\n        ))}\n      </Grid>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport {\n  Grid,\n  Typography,\n  Dialog,\n  Slide,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Slider,\n  MenuItem,\n  Select,\n  makeStyles,\n  Button\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport NameChips from \"./NameChips\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport LocalBarIcon from \"@material-ui/icons/LocalBar\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#ff3d42\"\n    },\n    error: {\n      main: \"#ff3d42\"\n    }\n  }\n});\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\nconst useStyles = makeStyles({\n  background: {\n    backgroundColor: \"#303030\"\n  },\n  text: {\n    color: \"white\"\n  }\n});\n\nexport default function Settings(props) {\n  const classes = useStyles();\n  const handleToggle = () => {\n    props.setOpen(!props.open);\n    window.location.reload();\n  };\n\n  return (\n    <Dialog\n      id=\"settings\"\n      PaperProps={{\n        classes: {\n          root: classes.background\n        }\n      }}\n      fullScreen\n      open={props.open}\n      onClose={handleToggle}\n      TransitionComponent={Transition}\n    >\n      <ThemeProvider theme={theme}>\n        <AppBar style={{ position: \"relative\" }}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={handleToggle}\n              aria-label=\"close\"\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\">Settings</Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid\n          container\n          direction=\"column\"\n          style={{\n            padding: \"16px 10%\",\n            width: \"100%\"\n          }}\n          alignItems=\"center\"\n          spacing={2}\n        >\n          <Grid item style={{ width: \"60%\" }}>\n            <Typography\n              className={classes.text}\n              style={{ textAlign: \"center\" }}\n            >\n              {\" \"}\n              Minimum/Maximum time (min) before spin\n            </Typography>\n            <Slider\n              value={props.settings.minMaxSec}\n              valueLabelDisplay=\"auto\"\n              step={0.5}\n              marks\n              min={0.5}\n              max={20}\n              onChange={(e, value) => {\n                props.setSettings({\n                  ...props.settings,\n                  minMaxSec: value\n                });\n                window.sessionStorage.setItem(\n                  \"minMaxSec\",\n                  JSON.stringify(props.settings.minMaxSec)\n                );\n              }}\n            />\n          </Grid>\n          <Grid item xs style={{ margin: \"auto\" }}>\n            <Typography className={classes.text}>\n              Max amt. of spinners\n            </Typography>\n            <Select\n              error\n              IconComponent={() => <LocalBarIcon style={{ fill: \"white\" }} />}\n              color=\"primary\"\n              style={{ marginLeft: \"40px\" }}\n              value={props.settings.amtSpinners}\n              onChange={e => {\n                props.setSettings({\n                  ...props.settings,\n                  amtSpinners: e.target.value\n                });\n                window.sessionStorage.setItem(\n                  \"amtSpinners\",\n                  JSON.stringify(e.target.value)\n                );\n              }}\n              inputProps={{\n                classes: {\n                  root: classes.text\n                }\n              }}\n            >\n              <MenuItem value={1}>1</MenuItem>\n              <MenuItem value={2}>2</MenuItem>\n              <MenuItem value={3}>3</MenuItem>\n              <MenuItem value={4}>4</MenuItem>\n            </Select>\n          </Grid>\n          <Grid item xs>\n            <NameChips\n              css={classes}\n              names={props.names}\n              setNames={props.setNames}\n            />\n          </Grid>\n          <Grid item xs>\n            <Button\n              variant=\"filled\"\n              onClick={() => {\n                props.setNames([]);\n                window.sessionStorage.setItem(\"names\", JSON.stringify([]));\n              }}\n            >\n              Delete all names\n            </Button>\n          </Grid>\n        </Grid>\n      </ThemeProvider>\n    </Dialog>\n  );\n}\n","import React, { useEffect, useCallback } from \"react\";\nimport $ from \"jquery\";\nimport \"./Spinner.css\";\n\nexport default function Spinner(props) {\n  const spin = useCallback(() => {\n    var users = props.names.map(name => name.name),\n      shuffled = [],\n      loadout = $(\"#loadout\" + props.nr),\n      insert_times = 30,\n      duration_time = 10000;\n\n    $(\"#roll\" + props.nr).attr(\"disabled\", true);\n    var scrollsize = 0,\n      diff = 0;\n    $(loadout).html(\"\");\n    $(\"#log\" + props.nr).html(\"\");\n    loadout.css(\"left\", \"100%\");\n    if (users.length < 10) {\n      insert_times = 20;\n      duration_time = 5000;\n    } else {\n      insert_times = 10;\n      duration_time = 10000;\n    }\n    for (var times = 0; times < insert_times; times++) {\n      shuffled = users;\n      shuffle(shuffled);\n      for (var i = 0; i < users.length; i++) {\n        loadout.append(\n          '<td><div class=\"roller\"><div>' + shuffled[i] + \"</div></div></td>\"\n        );\n        scrollsize = scrollsize + 192;\n      }\n    }\n\n    diff = Math.round(scrollsize / 2);\n    diff = randomEx(diff - 300, diff + 300);\n    $(\"#loadout\" + props.nr).animate(\n      {\n        left: \"-=\" + diff\n      },\n      duration_time,\n      function() {\n        $(\"#roll\" + props.nr).attr(\"disabled\", false);\n        $(\"#loadout\" + props.nr)\n          .children(\"td\")\n          .each(function() {\n            var center = window.innerWidth / 2;\n            if (\n              $(this).offset().left < center &&\n              $(this).offset().left + 185 > center\n            ) {\n              var text = $(this)\n                .children()\n                .text();\n              $(\"#log\" + props.nr).append(\n                'Skål <span class=\"badge\">' + text + \"!</span>\"\n              );\n              $(\"#prev-names\").append(\n                \"<p style=\" +\n                  \"color:#ff3d42;font-size:20px;font-family:arial;text-transform:uppercase;border-left:groove;border-color:#ff3d42;padding-right:15px;padding-left:15px;margin-top:0px;margin-bottom:0px;\" +\n                  \">\" +\n                  text +\n                  \"</p>\"\n              );\n              var storedPrevNames = JSON.parse(\n                sessionStorage.getItem(\"prevNames\")\n              );\n              var newPrevNames =\n                storedPrevNames === null || storedPrevNames === undefined\n                  ? []\n                  : storedPrevNames;\n              newPrevNames.push(text);\n              window.sessionStorage.setItem(\n                \"prevNames\",\n                JSON.stringify(newPrevNames)\n              );\n              var scrollTarget = document.getElementById(\"prev-names\");\n              scrollTarget.scrollLeft = scrollTarget.scrollWidth;\n            }\n          });\n      }\n    );\n  }, [props]);\n\n  function randomEx(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  function shuffle(arr) {\n    var counter = arr.length,\n      temp,\n      index;\n    while (counter > 0) {\n      index = (Math.random() * counter--) | 0;\n      temp = arr[counter];\n      arr[counter] = arr[index];\n      arr[index] = temp;\n    }\n  }\n\n  useEffect(() => {\n    spin();\n  }, [spin]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row topbox\">\n        <div className=\"col-md-6 col-md-offset-3 rollbox\">\n          <div className=\"line\"></div>\n          <table>\n            <tr className=\"loadout\" id={\"loadout\" + props.nr}></tr>\n          </table>\n        </div>\n      </div>\n\n      <div className=\"col-md-12\" style={{ textAlign: \"center\" }}>\n        <div className=\"log\" id={\"log\" + props.nr}></div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Shotterud from \"./views/Shotterud/Shotterud\";\n\nconst bodyScrollLock = require(\"body-scroll-lock\");\nconst disableBodyScroll = bodyScrollLock.disableBodyScroll;\n\nconst targetElement = document.querySelector(\"#root\");\n\n// 3. ...in some event handler after showing the target element...disable body scroll\ndisableBodyScroll(targetElement);\n\nReactDOM.render(<Shotterud />, document.getElementById(\"root\"));\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  Button,\n  Typography,\n  Grid,\n  AppBar,\n  IconButton\n} from \"@material-ui/core\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\nimport LocalBarIcon from \"@material-ui/icons/LocalBar\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Settings from \"../Settings/Settings\";\nimport Spinner from \"./Spinner\";\nimport \"./Shotterud.css\";\nimport $ from \"jquery\";\n\nexport default function Shotterud(props) {\n  var storedNames = JSON.parse(sessionStorage.getItem(\"names\"));\n  var storedAmtSpinners = JSON.parse(sessionStorage.getItem(\"amtSpinners\"));\n  var storedMinMaxSec = JSON.parse(sessionStorage.getItem(\"minMaxSec\"));\n  const [names, setNames] = useState(storedNames !== null ? storedNames : []);\n  const [settings, setSettings] = useState({\n    amtSpinners: storedAmtSpinners !== null ? storedAmtSpinners : 1,\n    minMaxSec: storedMinMaxSec !== null ? storedMinMaxSec : [10, 15]\n  });\n  const [settingsOpen, setSettingsOpen] = useState(false);\n\n  const randomTime = useCallback(\n    callback => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          callback();\n          resolve();\n        }, (Math.random() * (settings.minMaxSec[1] * 60 - settings.minMaxSec[0] * 60) + settings.minMaxSec[0] * 60) * 1000);\n      });\n    },\n    [settings.minMaxSec]\n  );\n\n  const spinnerGenerator = useCallback(() => {\n    var percentage = Math.random() * 101;\n    var doubleSpin = percentage > 80 && settings.amtSpinners >= 2;\n    var trippleSpin = percentage > 92 && settings.amtSpinners >= 3;\n    var quadroupleSpin = percentage > 96 && settings.amtSpinners >= 4;\n    var amt = 1;\n    if (quadroupleSpin) amt = 4;\n    else if (trippleSpin) amt = 3;\n    else if (doubleSpin) amt = 2;\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        style={{ height: \"100%\" }}\n        spacing={4}\n      >\n        {Array(amt)\n          .fill()\n          .map((spinner, index) => (\n            <Grid item>\n              <Spinner names={names} nr={index} />\n            </Grid>\n          ))}\n      </Grid>\n    );\n  }, [names, settings]);\n\n  const start = useCallback(\n    async function() {\n      while (true) {\n        await randomTime(() => {\n          if (names.length > 1) {\n            ReactDOM.render(\n              spinnerGenerator(),\n              document.getElementById(\"spinners\")\n            );\n            setTimeout(() => {\n              ReactDOM.render(\"\", document.getElementById(\"spinners\"));\n            }, 25000);\n          }\n        });\n      }\n    },\n    [names, randomTime, spinnerGenerator]\n  );\n\n  useEffect(() => {\n    start();\n    var storedPrevNames = JSON.parse(sessionStorage.getItem(\"prevNames\"));\n    if (storedPrevNames !== null) {\n      storedPrevNames.map(name => {\n        $(\"#prev-names\").append(\n          \"<p style=\" +\n            \"color:#ff3d42;font-size:20px;font-family:arial;text-transform:uppercase;border-left:groove;border-color:#ff3d42;padding-right:15px;padding-left:15px;margin-top:0px;margin-bottom:0px;\" +\n            \">\" +\n            name +\n            \"</p>\"\n        );\n        return null;\n      });\n      var scrollTarget = document.getElementById(\"prev-names\");\n      scrollTarget.scrollLeft = scrollTarget.scrollWidth;\n    }\n  }, [start]);\n\n  return (\n    <div>\n      <AppBar id=\"AppBar\">\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          style={{ height: \"100%\" }}\n        >\n          <Grid item container direction=\"row\" justify=\"flex-end\">\n            <div className=\"hideScrollBar\" id=\"prev-names\"></div>\n            <div style={{ position: \"absolute\", right: \"0\", top: \"0\" }}>\n              <ArrowBack />\n              <LocalBarIcon />\n            </div>\n            <div style={{ position: \"absolute\", left: \"0\", top: \"0\" }}>\n              <IconButton\n                size=\"small\"\n                style={{ padding: \"0px\" }}\n                onClick={() => {\n                  $(\"#prev-names\").empty();\n                  window.sessionStorage.setItem(\n                    \"prevNames\",\n                    JSON.stringify([])\n                  );\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n            </div>\n          </Grid>\n        </Grid>\n      </AppBar>\n      <Grid container justify=\"center\">\n        {names.length < 2 ? (\n          <h1 className=\"header-text\" style={{ marginTop: \"40px\" }}>\n            Velkommen til <br /> SHOTTERUD\n          </h1>\n        ) : (\n          <h1\n            className=\"header-text\"\n            style={{ marginTop: \"40px\", marginBottom: 0 }}\n          >\n            SHOTTERUD\n          </h1>\n        )}\n      </Grid>\n      <div\n        id=\"spinners\"\n        style={{ height: \"100%\", width: \"100%\", position: \"absolute\" }}\n      ></div>\n      {names.length < 2 ? (\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          style={{ marginTop: \"100px\" }}\n        >\n          <Typography\n            className=\"infoText\"\n            variant=\"h5\"\n            style={{ textTransform: \"uppercase\" }}\n          >\n            Add more than 1 player\n          </Typography>\n        </Grid>\n      ) : null}\n      <Grid\n        container\n        justify=\"center\"\n        style={{\n          position: \"absolute\",\n          bottom: \"6px\",\n          width: \"100%\"\n        }}\n      >\n        <Button\n          onClick={() => setSettingsOpen(true)}\n          style={{ color: \"#ff3d42\", fontSize: \"24px\" }}\n        >\n          Settings\n        </Button>\n      </Grid>\n\n      <Settings\n        open={settingsOpen}\n        setOpen={setSettingsOpen}\n        names={names}\n        setNames={setNames}\n        settings={settings}\n        setSettings={setSettings}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}