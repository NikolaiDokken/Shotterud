{"version":3,"sources":["components/TopBar.jsx","components/Spinner.jsx","pages/SpinnerPage.jsx","pages/Settings.jsx","utils/utils.js","static/christmas_decor.png","App.js","index.js"],"names":["TopBar","prevNames","setPrevNames","settings","setSettings","theme","useTheme","AppBar","position","Toolbar","sx","mr","Box","id","display","flex","alignItems","overflowX","map","name","index","width","minHeight","bgcolor","ml","Typography","length","Button","startIcon","color","onClick","Select","value","label","onChange","e","target","size","palette","primary","contrastText","borderColor","Object","keys","themes","themeKey","MenuItem","Spinner","names","spinnerNr","spin","useCallback","users","shuffled","loadout","$","insert_times","duration_time","attr","min","max","scrollsize","diff","html","css","times","shuffle","i","append","Math","round","floor","random","animate","left","children","each","center","window","innerWidth","this","offset","text","previousState","concat","arr","temp","counter","useEffect","className","style","textAlign","SpinnerPage","navigate","useNavigate","isMounted","useRef","getCurrentTime","now","Date","getHours","getMinutes","getSeconds","spinnerGenerator","current","console","log","percentage","doubleSpin","amtSpinners","trippleSpin","amt","Array","fill","spinner","randomTime","Promise","resolve","reject","setTimeout","minMaxMinutes","start","a","then","ReactDOM","render","document","getElementById","py","px","justifyContent","getContrastText","background","default","variant","mt","Fab","bottom","right","Settings","setNames","useState","setName","handleAddName","prevState","maxWidth","pY","mb","Slider","event","newValue","activeThumb","isArray","valueLabelDisplay","flexDirection","OutlinedInput","placeholder","onKeyDown","keyCode","endAdornment","InputAdornment","IconButton","border","action","disabled","borderRadius","p","Chip","onDelete","nameToDelete","filter","writeToSessionStorage","key","sessionStorage","setItem","readFromSessionStorage","getItem","App","dataIsLoaded","setDataIsLoaded","readNames","JSON","parse","readSettings","stringify","ThemeProvider","createTheme","CssBaseline","src","christmasDecor","alt","path","element","StrictMode"],"mappings":"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","file":"static/js/main.02e9d0f9.chunk.js","sourcesContent":["import {\n    AppBar,\n    Toolbar,\n    Typography,\n    Box,\n    Button,\n    Select,\n    MenuItem,\n} from \"@mui/material\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport LocalBarIcon from \"@mui/icons-material/LocalBar\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport themes from \"../utils/themes.json\";\nimport { useTheme } from \"@mui/material/styles\";\n\nexport default function TopBar({\n    prevNames,\n    setPrevNames,\n    settings,\n    setSettings,\n}) {\n    const theme = useTheme();\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <LocalBarIcon sx={{ mr: 1 }} />\n                <ArrowForwardIosIcon sx={{ mr: 1 }} />\n                <Box\n                    id=\"prev-names\"\n                    sx={{\n                        display: \"flex\",\n                        flex: 1,\n                        alignItems: \"center\",\n                        overflowX: \"auto\",\n                    }}\n                >\n                    {prevNames.map((name, index) =>\n                        index !== 0 ? (\n                            <Box key={index} sx={{ display: \"flex\" }}>\n                                <Box\n                                    sx={{\n                                        width: 2,\n                                        minHeight: \"100%\",\n                                        bgcolor: \"white\",\n                                        ml: 1,\n                                        mr: 1,\n                                    }}\n                                />\n                                <Typography>{name}</Typography>\n                            </Box>\n                        ) : (\n                            <Typography key={index}>{name}</Typography>\n                        )\n                    )}\n                </Box>\n                {prevNames.length > 0 && (\n                    <Button\n                        startIcon={<ClearIcon />}\n                        color=\"inherit\"\n                        onClick={() => setPrevNames([])}\n                    >\n                        Clear\n                    </Button>\n                )}\n                <Select\n                    name=\"theme\"\n                    value={settings.theme}\n                    label=\"Theme\"\n                    onChange={(e) =>\n                        setSettings({ ...settings, theme: e.target.value })\n                    }\n                    size=\"small\"\n                    sx={{\n                        ml: 2,\n                        color: theme.palette.primary.contrastText,\n                        borderColor: theme.palette.primary.contrastText,\n                    }}\n                >\n                    {Object.keys(themes).map((themeKey, index) => (\n                        <MenuItem key={index} value={themeKey}>\n                            {themes[themeKey].name}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import React, { useCallback, useEffect } from \"react\";\nimport $ from \"jquery\";\nimport \"../styles/Spinner.css\";\n\nexport default function Spinner({ names, spinnerNr, prevNames, setPrevNames }) {\n    const spin = useCallback(() => {\n        let users = names;\n        let shuffled = [];\n        let loadout = $(\"#loadout\" + spinnerNr);\n        let insert_times = 30;\n        let duration_time = 10000;\n\n        $(\"#roll\" + spinnerNr).attr(\"disabled\", true);\n        var scrollsize = 0,\n            diff = 0;\n        $(loadout).html(\"\");\n        $(\"#log\" + spinnerNr).html(\"\");\n        loadout.css(\"left\", \"100%\");\n        if (users.length < 10) {\n            insert_times = 20;\n            duration_time = 5000;\n        } else {\n            insert_times = 10;\n            duration_time = 10000;\n        }\n        for (var times = 0; times < insert_times; times++) {\n            shuffled = users;\n            shuffle(shuffled);\n            for (var i = 0; i < users.length; i++) {\n                loadout.append(\n                    '<td><div class=\"roller\"><div>' +\n                        shuffled[i] +\n                        \"</div></div></td>\"\n                );\n                scrollsize = scrollsize + 192;\n            }\n        }\n\n        diff = Math.round(scrollsize / 2);\n        diff = randomEx(diff - 300, diff + 300);\n        $(\"#loadout\" + spinnerNr).animate(\n            {\n                left: \"-=\" + diff,\n            },\n            duration_time,\n            function () {\n                $(\"#roll\" + spinnerNr).attr(\"disabled\", false);\n                $(\"#loadout\" + spinnerNr)\n                    .children(\"td\")\n                    .each(function () {\n                        var center = window.innerWidth / 2;\n                        if (\n                            $(this).offset().left < center &&\n                            $(this).offset().left + 185 > center\n                        ) {\n                            var text = $(this).children().text();\n                            $(\"#log\" + spinnerNr).append(\n                                'Skål <span class=\"badge\">' + text + \"!</span>\"\n                            );\n                            setPrevNames((previousState) =>\n                                [text].concat(previousState)\n                            );\n                        }\n                    });\n            }\n        );\n        // eslint-disable-next-line\n    }, [names, setPrevNames, spinnerNr]);\n\n    function randomEx(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    function shuffle(arr) {\n        var counter = arr.length,\n            temp,\n            index;\n        while (counter > 0) {\n            index = (Math.random() * counter--) | 0;\n            temp = arr[counter];\n            arr[counter] = arr[index];\n            arr[index] = temp;\n        }\n    }\n    useEffect(() => spin(), [spin]);\n\n    return (\n        <div className=\"container\">\n            <div className=\"row topbox\">\n                <div className=\"col-md-6 col-md-offset-3 rollbox\">\n                    <div className=\"line\"></div>\n                    <table>\n                        <tbody>\n                            <tr\n                                className=\"loadout\"\n                                id={\"loadout\" + spinnerNr}\n                            ></tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <div className=\"col-md-12\" style={{ textAlign: \"center\" }}>\n                <div className=\"log\" id={\"log\" + spinnerNr}></div>\n            </div>\n        </div>\n    );\n}\n","import { Box, Fab, Typography } from \"@mui/material\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { useNavigate } from \"react-router-dom\";\nimport Spinner from \"../components/Spinner\";\nimport ReactDOM from \"react-dom\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\n\nexport default function SpinnerPage({\n    names,\n    settings,\n    prevNames,\n    setPrevNames,\n}) {\n    const navigate = useNavigate();\n    const theme = useTheme();\n    const isMounted = useRef(false);\n\n    const getCurrentTime = () => {\n        const now = new Date();\n        return (\n            \"[\" +\n            now.getHours() +\n            \":\" +\n            now.getMinutes() +\n            \":\" +\n            now.getSeconds() +\n            \"]\"\n        );\n    };\n\n    const spinnerGenerator = useCallback(() => {\n        if (isMounted.current) {\n            console.log(getCurrentTime() + \" Generating Spinners...\");\n            let percentage = Math.random() * 101;\n            let doubleSpin = percentage > 80 && settings.amtSpinners >= 2;\n            let trippleSpin = percentage > 90 && settings.amtSpinners >= 3;\n            let quadroupleSpin = percentage > 95 && settings.amtSpinners >= 4;\n            let amt = 1;\n            if (quadroupleSpin) amt = 4;\n            else if (trippleSpin) amt = 3;\n            else if (doubleSpin) amt = 2;\n            return (\n                <Box>\n                    {Array(amt)\n                        .fill()\n                        .map((spinner, index) => (\n                            <Spinner\n                                key={index}\n                                names={names}\n                                spinnerNr={index}\n                                prevNames={prevNames}\n                                setPrevNames={setPrevNames}\n                            />\n                        ))}\n                </Box>\n            );\n        }\n        // eslint-disable-next-line\n    }, [names, settings.amtSpinners, setPrevNames]);\n\n    const randomTime = useCallback(() => {\n        console.log(getCurrentTime() + \" Picking Random Time...\");\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve();\n            }, (Math.random() * (settings.minMaxMinutes[1] * 60 - settings.minMaxMinutes[0] * 60) + settings.minMaxMinutes[0] * 60) * 1000);\n        });\n    }, [settings.minMaxMinutes]);\n\n    const start = useCallback(async () => {\n        console.log(getCurrentTime() + \" Starting Game...\");\n        while (isMounted.current) {\n            await randomTime().then(() => {\n                if (isMounted.current) {\n                    if (names.length > 1) {\n                        ReactDOM.render(\n                            spinnerGenerator(),\n                            document.getElementById(\"spinners\")\n                        );\n                        setTimeout(() => {\n                            ReactDOM.render(\n                                \"\",\n                                document.getElementById(\"spinners\")\n                            );\n                        }, 25000);\n                    }\n                }\n            });\n        }\n    }, [names.length, randomTime, spinnerGenerator]);\n\n    useEffect(() => {\n        isMounted.current = true;\n        if (names.length > 1) {\n            start();\n        }\n        return () => {\n            isMounted.current = false;\n            console.log(\"Stopping Game...\");\n        };\n        // eslint-disable-next-line\n    }, [start]);\n\n    return (\n        <Box sx={{ py: 4, px: 4 }}>\n            <Box\n                sx={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    color: theme.palette.getContrastText(\n                        theme.palette.background.default\n                    ),\n                    textAlign: \"center\",\n                }}\n            >\n                {names.length > 1 ? (\n                    <Typography variant=\"h4\">\n                        {settings.theme === \"christmas\"\n                            ? \"SHO-HO-HOTTERUD\"\n                            : \"SHOTTERUD\"}\n                    </Typography>\n                ) : (\n                    <Box>\n                        <Typography variant=\"h4\">SHOTTERUD</Typography>\n                        <Typography variant=\"h3\" sx={{ mt: 10 }}>\n                            Add more players to begin\n                        </Typography>\n                    </Box>\n                )}\n            </Box>\n            <div id=\"spinners\"></div>\n            <Fab\n                color=\"primary\"\n                variant=\"extended\"\n                aria-label=\"add\"\n                sx={{ position: \"absolute\", bottom: 16, right: 16 }}\n                onClick={() => navigate(\"/settings\")}\n            >\n                <SettingsIcon sx={{ mr: 1 }} />\n                Settings\n            </Fab>\n        </Box>\n    );\n}\n","import { useState } from \"react\";\nimport {\n    Box,\n    Fab,\n    Slider,\n    Typography,\n    Select,\n    MenuItem,\n    InputAdornment,\n    IconButton,\n    OutlinedInput,\n    Chip,\n    Button,\n} from \"@mui/material\";\nimport LocalBarIcon from \"@mui/icons-material/LocalBar\";\nimport { useNavigate } from \"react-router-dom\";\nimport PersonAddIcon from \"@mui/icons-material/PersonAdd\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { useTheme } from \"@mui/material/styles\";\n\nexport default function Settings({ settings, setSettings, names, setNames }) {\n    const navigate = useNavigate();\n    const theme = useTheme();\n    const [name, setName] = useState(\"\");\n\n    const handleChangeSettings = (e) => {\n        setSettings({ ...settings, [e.target.name]: e.target.value });\n    };\n\n    const handleAddName = () => {\n        setNames((prevState) => prevState.concat(name));\n        setName(\"\");\n    };\n\n    const handleDeleteName = (nameToDelete) => {\n        setNames(names.filter((name) => name !== nameToDelete));\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.keyCode === 13) {\n            handleAddName();\n        }\n    };\n\n    const handleSliderChange = (event, newValue, activeThumb) => {\n        const minDistance = 1;\n\n        if (!Array.isArray(newValue)) {\n            return;\n        }\n\n        if (activeThumb === 0) {\n            setSettings({\n                ...settings,\n                minMaxMinutes: [\n                    Math.min(\n                        newValue[0],\n                        settings.minMaxMinutes[1] - minDistance\n                    ),\n                    settings.minMaxMinutes[1],\n                ],\n            });\n        } else {\n            setSettings({\n                ...settings,\n                minMaxMinutes: [\n                    settings.minMaxMinutes[0],\n                    Math.max(\n                        newValue[1],\n                        settings.minMaxMinutes[0] + minDistance\n                    ),\n                ],\n            });\n        }\n    };\n\n    return (\n        <Box\n            sx={{\n                display: \"flex\",\n                width: \"100%\",\n                justifyContent: \"center\",\n                color: theme.palette.getContrastText(\n                    theme.palette.background.default\n                ),\n            }}\n        >\n            <Box\n                sx={{\n                    maxWidth: \"100%\",\n                    width: \"600px\",\n                    pY: 2,\n                    px: 4,\n                    textAlign: \"center\",\n                }}\n            >\n                <Typography variant=\"h3\" sx={{ mb: 4 }}>\n                    Settings\n                </Typography>\n                <Typography>\n                    Minimum and Maximum Waiting Time (Minutes)\n                </Typography>\n                <Slider\n                    name=\"minMaxMinutes\"\n                    value={settings.minMaxMinutes}\n                    onChange={handleSliderChange}\n                    valueLabelDisplay=\"auto\"\n                    sx={{ mb: 2 }}\n                />\n                <Box\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        alignItems: \"center\",\n                        mb: 2,\n                    }}\n                >\n                    <Typography sx={{ flex: 1, textAlign: \"left\" }}>\n                        Maximum number of spinners:{\" \"}\n                    </Typography>\n                    <Select\n                        name=\"amtSpinners\"\n                        value={settings.amtSpinners}\n                        label=\"Spinners\"\n                        onChange={handleChangeSettings}\n                        variant=\"standard\"\n                        sx={{\n                            color: theme.palette.getContrastText(\n                                theme.palette.background.default\n                            ),\n                        }}\n                    >\n                        <MenuItem value={1}>One</MenuItem>\n                        <MenuItem value={2}>Two</MenuItem>\n                        <MenuItem value={3}>Three</MenuItem>\n                        <MenuItem value={4}>Four</MenuItem>\n                    </Select>\n                </Box>\n                <Box\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        alignItems: \"center\",\n                        mb: 2,\n                    }}\n                >\n                    <Typography sx={{ flex: 1, textAlign: \"left\" }}>\n                        Add players:\n                    </Typography>\n                    <OutlinedInput\n                        value={name}\n                        placeholder=\"Name\"\n                        onChange={(e) => setName(e.target.value)}\n                        onKeyDown={handleKeyPress}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <IconButton onClick={handleAddName}>\n                                    <PersonAddIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        }\n                        sx={{\n                            color: theme.palette.getContrastText(\n                                theme.palette.background.default\n                            ),\n                        }}\n                    />\n                </Box>\n                <Box\n                    sx={\n                        names.length === 0\n                            ? {\n                                  display: \"flex\",\n                                  border:\n                                      \"1px solid \" +\n                                      theme.palette.action.disabled,\n                                  borderRadius: 1,\n                                  color: theme.palette.action.disabled,\n                                  alignItems: \"center\",\n                                  justifyContent: \"center\",\n                                  textAlign: \"center\",\n                                  minHeight: \"100px\",\n                                  mb: 2,\n                              }\n                            : {\n                                  border: \"1px solid\",\n                                  borderRadius: 1,\n                                  p: 1,\n                                  textAlign: \"left\",\n                                  minHeight: \"100px\",\n                                  mb: 2,\n                              }\n                    }\n                >\n                    {names.length > 0 ? (\n                        names.map((name, index) => (\n                            <Chip\n                                key={index}\n                                label={name}\n                                sx={{ mr: 1 }}\n                                color=\"primary\"\n                                onDelete={() => handleDeleteName(name)}\n                            />\n                        ))\n                    ) : (\n                        <Typography variant=\"h4\">No Players :(</Typography>\n                    )}\n                </Box>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<DeleteIcon />}\n                    onClick={() => setNames([])}\n                >\n                    Delete All\n                </Button>\n                <Fab\n                    color=\"primary\"\n                    variant=\"extended\"\n                    aria-label=\"add\"\n                    sx={{ position: \"absolute\", bottom: 16, right: 16 }}\n                    onClick={() => navigate(\"/\")}\n                >\n                    <LocalBarIcon sx={{ mr: 1 }} />\n                    Save and go back to game\n                </Fab>\n            </Box>\n        </Box>\n    );\n}\n","export const writeToSessionStorage = (key, value) => {\n    window.sessionStorage.setItem(key, value);\n};\n\nexport const readFromSessionStorage = (key) => {\n    return window.sessionStorage.getItem(key);\n};\n","export default __webpack_public_path__ + \"static/media/christmas_decor.28d6bdc3.png\";","import React, { useEffect, useState } from \"react\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport TopBar from \"./components/TopBar\";\nimport SpinnerPage from \"./pages/SpinnerPage\";\nimport Settings from \"./pages/Settings\";\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\nimport { writeToSessionStorage, readFromSessionStorage } from \"./utils/utils\";\nimport themes from \"./utils/themes.json\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport christmasDecor from \"./static/christmas_decor.png\";\n\nfunction App() {\n    const [names, setNames] = useState([]);\n    const [prevNames, setPrevNames] = useState([]);\n    const [settings, setSettings] = useState({\n        amtSpinners: 1,\n        minMaxMinutes: [15, 30],\n        theme: \"default\",\n    });\n    const [dataIsLoaded, setDataIsLoaded] = useState(false);\n    // const [theme, setTheme] = useState(themes.christmas);\n\n    useEffect(() => {\n        // Reads names and settings from sessionStorage\n        const readNames = JSON.parse(readFromSessionStorage(\"names\"));\n        const readSettings = JSON.parse(readFromSessionStorage(\"settings\"));\n        if (readNames) {\n            setNames(readNames);\n        }\n\n        if (\n            JSON.stringify(readSettings) !== JSON.stringify(settings) &&\n            readSettings !== null\n        ) {\n            setSettings(readSettings);\n        }\n        setDataIsLoaded(true);\n        // eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        // Stores names in sessionStorage for each change\n        if (names) {\n            writeToSessionStorage(\"names\", JSON.stringify(names));\n        }\n    }, [names]);\n\n    useEffect(() => {\n        // Stores settings in sessionStorage for each change\n        writeToSessionStorage(\"settings\", JSON.stringify(settings));\n    }, [settings]);\n\n    if (dataIsLoaded) {\n        return (\n            <ThemeProvider theme={createTheme(themes[settings.theme])}>\n                <CssBaseline />\n                <TopBar\n                    prevNames={prevNames}\n                    setPrevNames={setPrevNames}\n                    settings={settings}\n                    setSettings={setSettings}\n                />\n                {settings.theme === \"christmas\" ? (\n                    <img\n                        src={christmasDecor}\n                        alt=\"Christmas Decor\"\n                        style={{ width: \"100%\" }}\n                    ></img>\n                ) : null}\n                <HashRouter>\n                    <Routes>\n                        <Route\n                            path=\"/\"\n                            element={\n                                <SpinnerPage\n                                    names={names}\n                                    settings={settings}\n                                    prevNames={prevNames}\n                                    setPrevNames={setPrevNames}\n                                />\n                            }\n                        />\n                        <Route\n                            path=\"/settings\"\n                            element={\n                                <Settings\n                                    settings={settings}\n                                    setSettings={setSettings}\n                                    names={names}\n                                    setNames={setNames}\n                                />\n                            }\n                        />\n                    </Routes>\n                </HashRouter>\n            </ThemeProvider>\n        );\n    } else {\n        return <div>Loading...</div>;\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}