{"version":3,"sources":["components/TopBar.jsx","components/Spinner.jsx","pages/SpinnerPage.jsx","pages/Settings.jsx","utils/utils.js","App.js","index.js"],"names":["TopBar","prevNames","setPrevNames","settings","setSettings","theme","useTheme","AppBar","position","Toolbar","sx","mr","Box","id","display","flex","alignItems","map","name","index","width","minHeight","bgcolor","ml","Typography","Button","startIcon","color","onClick","Select","value","label","onChange","e","target","size","palette","primary","contrastText","borderColor","Object","keys","themes","themeKey","MenuItem","Spinner","names","spinnerNr","spin","useCallback","users","shuffled","loadout","$","insert_times","duration_time","attr","min","max","scrollsize","diff","html","css","length","times","shuffle","i","append","Math","round","floor","random","animate","left","children","each","center","window","innerWidth","this","offset","text","previousState","concat","arr","temp","counter","useEffect","className","style","textAlign","SpinnerPage","navigate","useNavigate","isMounted","useRef","getCurrentTime","now","Date","getHours","getMinutes","getSeconds","spinnerGenerator","current","console","log","percentage","doubleSpin","amtSpinners","trippleSpin","amt","Array","fill","spinner","randomTime","Promise","resolve","reject","setTimeout","minMaxMinutes","start","a","then","ReactDOM","render","document","getElementById","justifyContent","mt","getContrastText","background","default","variant","Fab","aria-label","bottom","right","Settings","setNames","useState","setName","handleChangeSettings","handleAddName","prevState","maxWidth","p","mb","Slider","valueLabelDisplay","flexDirection","OutlinedInput","placeholder","onKeyDown","keyCode","endAdornment","InputAdornment","IconButton","border","action","disabled","borderRadius","Chip","onDelete","nameToDelete","filter","writeToSessionStorage","key","sessionStorage","setItem","readFromSessionStorage","getItem","App","dataIsLoaded","setDataIsLoaded","readNames","JSON","parse","readSettings","stringify","ThemeProvider","createTheme","CssBaseline","path","element","StrictMode"],"mappings":"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","file":"static/js/main.eea89c82.chunk.js","sourcesContent":["import {\n    AppBar,\n    Toolbar,\n    Typography,\n    Box,\n    Button,\n    Select,\n    MenuItem,\n} from \"@mui/material\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport LocalBarIcon from \"@mui/icons-material/LocalBar\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport themes from \"../utils/themes.json\";\nimport { useTheme } from \"@mui/material/styles\";\n\nexport default function TopBar({\n    prevNames,\n    setPrevNames,\n    settings,\n    setSettings,\n}) {\n    const theme = useTheme();\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <LocalBarIcon sx={{ mr: 1 }} />\n                <ArrowForwardIosIcon sx={{ mr: 1 }} />\n                <Box\n                    id=\"prev-names\"\n                    sx={{ display: \"flex\", flex: 1, alignItems: \"center\" }}\n                >\n                    {prevNames.map((name, index) =>\n                        index !== 0 ? (\n                            <Box key={index} sx={{ display: \"flex\" }}>\n                                <Box\n                                    sx={{\n                                        width: 2,\n                                        minHeight: \"100%\",\n                                        bgcolor: \"white\",\n                                        ml: 1,\n                                        mr: 1,\n                                    }}\n                                />\n                                <Typography>{name}</Typography>\n                            </Box>\n                        ) : (\n                            <Typography key={index}>{name}</Typography>\n                        )\n                    )}\n                </Box>\n                <Button\n                    startIcon={<ClearIcon />}\n                    color=\"inherit\"\n                    onClick={() => setPrevNames([])}\n                >\n                    Clear\n                </Button>\n                <Select\n                    name=\"theme\"\n                    value={settings.theme}\n                    label=\"Theme\"\n                    onChange={(e) =>\n                        setSettings({ ...settings, theme: e.target.value })\n                    }\n                    size=\"small\"\n                    sx={{\n                        ml: 2,\n                        color: theme.palette.primary.contrastText,\n                        borderColor: theme.palette.primary.contrastText,\n                    }}\n                >\n                    {Object.keys(themes).map((themeKey, index) => (\n                        <MenuItem key={index} value={themeKey}>\n                            {themes[themeKey].name}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import React, { useCallback, useEffect } from \"react\";\nimport $ from \"jquery\";\nimport \"../styles/Spinner.css\";\n\nexport default function Spinner({ names, spinnerNr, prevNames, setPrevNames }) {\n    const spin = useCallback(() => {\n        let users = names;\n        let shuffled = [];\n        let loadout = $(\"#loadout\" + spinnerNr);\n        let insert_times = 30;\n        let duration_time = 10000;\n\n        $(\"#roll\" + spinnerNr).attr(\"disabled\", true);\n        var scrollsize = 0,\n            diff = 0;\n        $(loadout).html(\"\");\n        $(\"#log\" + spinnerNr).html(\"\");\n        loadout.css(\"left\", \"100%\");\n        if (users.length < 10) {\n            insert_times = 20;\n            duration_time = 5000;\n        } else {\n            insert_times = 10;\n            duration_time = 10000;\n        }\n        for (var times = 0; times < insert_times; times++) {\n            shuffled = users;\n            shuffle(shuffled);\n            for (var i = 0; i < users.length; i++) {\n                loadout.append(\n                    '<td><div class=\"roller\"><div>' +\n                        shuffled[i] +\n                        \"</div></div></td>\"\n                );\n                scrollsize = scrollsize + 192;\n            }\n        }\n\n        diff = Math.round(scrollsize / 2);\n        diff = randomEx(diff - 300, diff + 300);\n        $(\"#loadout\" + spinnerNr).animate(\n            {\n                left: \"-=\" + diff,\n            },\n            duration_time,\n            function () {\n                $(\"#roll\" + spinnerNr).attr(\"disabled\", false);\n                $(\"#loadout\" + spinnerNr)\n                    .children(\"td\")\n                    .each(function () {\n                        var center = window.innerWidth / 2;\n                        if (\n                            $(this).offset().left < center &&\n                            $(this).offset().left + 185 > center\n                        ) {\n                            var text = $(this).children().text();\n                            $(\"#log\" + spinnerNr).append(\n                                'Skål <span class=\"badge\">' + text + \"!</span>\"\n                            );\n                            setPrevNames((previousState) =>\n                                [text].concat(previousState)\n                            );\n                        }\n                    });\n            }\n        );\n        // eslint-disable-next-line\n    }, [names, setPrevNames, spinnerNr]);\n\n    function randomEx(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    function shuffle(arr) {\n        var counter = arr.length,\n            temp,\n            index;\n        while (counter > 0) {\n            index = (Math.random() * counter--) | 0;\n            temp = arr[counter];\n            arr[counter] = arr[index];\n            arr[index] = temp;\n        }\n    }\n    useEffect(() => spin(), [spin]);\n\n    return (\n        <div className=\"container\">\n            <div className=\"row topbox\">\n                <div className=\"col-md-6 col-md-offset-3 rollbox\">\n                    <div className=\"line\"></div>\n                    <table>\n                        <tbody>\n                            <tr\n                                className=\"loadout\"\n                                id={\"loadout\" + spinnerNr}\n                            ></tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n            <div className=\"col-md-12\" style={{ textAlign: \"center\" }}>\n                <div className=\"log\" id={\"log\" + spinnerNr}></div>\n            </div>\n        </div>\n    );\n}\n","import { Box, Fab, Typography } from \"@mui/material\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { useNavigate } from \"react-router-dom\";\nimport Spinner from \"../components/Spinner\";\nimport ReactDOM from \"react-dom\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\n\nexport default function SpinnerPage({\n    names,\n    settings,\n    prevNames,\n    setPrevNames,\n}) {\n    const navigate = useNavigate();\n    const theme = useTheme();\n    const isMounted = useRef(false);\n\n    const getCurrentTime = () => {\n        const now = new Date();\n        return (\n            \"[\" +\n            now.getHours() +\n            \":\" +\n            now.getMinutes() +\n            \":\" +\n            now.getSeconds() +\n            \"]\"\n        );\n    };\n\n    const spinnerGenerator = useCallback(() => {\n        if (isMounted.current) {\n            console.log(getCurrentTime() + \" Generating Spinners...\");\n            let percentage = Math.random() * 101;\n            let doubleSpin = percentage > 80 && settings.amtSpinners >= 2;\n            let trippleSpin = percentage > 90 && settings.amtSpinners >= 3;\n            let quadroupleSpin = percentage > 95 && settings.amtSpinners >= 4;\n            let amt = 1;\n            if (quadroupleSpin) amt = 4;\n            else if (trippleSpin) amt = 3;\n            else if (doubleSpin) amt = 2;\n            return (\n                <Box>\n                    {Array(amt)\n                        .fill()\n                        .map((spinner, index) => (\n                            <Spinner\n                                key={index}\n                                names={names}\n                                spinnerNr={index}\n                                prevNames={prevNames}\n                                setPrevNames={setPrevNames}\n                            />\n                        ))}\n                </Box>\n            );\n        }\n        // eslint-disable-next-line\n    }, [names, settings.amtSpinners, setPrevNames]);\n\n    const randomTime = useCallback(() => {\n        console.log(getCurrentTime() + \" Picking Random Time...\");\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve();\n            }, (Math.random() * (settings.minMaxMinutes[1] * 60 - settings.minMaxMinutes[0] * 60) + settings.minMaxMinutes[0] * 60) * 1000);\n        });\n    }, [settings.minMaxMinutes]);\n\n    const start = useCallback(async () => {\n        console.log(getCurrentTime() + \" Starting Game...\");\n        while (isMounted.current) {\n            await randomTime().then(() => {\n                if (isMounted.current) {\n                    if (names.length > 1) {\n                        ReactDOM.render(\n                            spinnerGenerator(),\n                            document.getElementById(\"spinners\")\n                        );\n                        setTimeout(() => {\n                            ReactDOM.render(\n                                \"\",\n                                document.getElementById(\"spinners\")\n                            );\n                        }, 25000);\n                    }\n                }\n            });\n        }\n    }, [names.length, randomTime, spinnerGenerator]);\n\n    useEffect(() => {\n        isMounted.current = true;\n        if (names.length > 1) {\n            start();\n        }\n        return () => {\n            isMounted.current = false;\n            console.log(\"Stopping Game...\");\n        };\n        // eslint-disable-next-line\n    }, [start]);\n\n    return (\n        <Box>\n            <Box\n                sx={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    mt: 4,\n                    color: theme.palette.getContrastText(\n                        theme.palette.background.default\n                    ),\n                    textAlign: \"center\",\n                }}\n            >\n                {names.length > 1 ? (\n                    <Typography variant=\"h4\">\n                        {settings.theme === \"christmas\"\n                            ? \"SHO-HO-HOTTERUD\"\n                            : \"SHOTTERUD\"}\n                    </Typography>\n                ) : (\n                    <Typography variant=\"h4\">\n                        Velkommen til <br /> SHOTTERUD\n                    </Typography>\n                )}\n            </Box>\n            <div id=\"spinners\"></div>\n            <Fab\n                color=\"primary\"\n                variant=\"extended\"\n                aria-label=\"add\"\n                sx={{ position: \"absolute\", bottom: 16, right: 16 }}\n                onClick={() => navigate(\"/settings\")}\n            >\n                <SettingsIcon sx={{ mr: 1 }} />\n                Settings\n            </Fab>\n        </Box>\n    );\n}\n","import { useState } from \"react\";\nimport {\n    Box,\n    Fab,\n    Slider,\n    Typography,\n    Select,\n    MenuItem,\n    InputAdornment,\n    IconButton,\n    OutlinedInput,\n    Chip,\n    Button,\n} from \"@mui/material\";\nimport LocalBarIcon from \"@mui/icons-material/LocalBar\";\nimport { useNavigate } from \"react-router-dom\";\nimport PersonAddIcon from \"@mui/icons-material/PersonAdd\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { useTheme } from \"@mui/material/styles\";\n\nexport default function Settings({ settings, setSettings, names, setNames }) {\n    const navigate = useNavigate();\n    const theme = useTheme();\n    const [name, setName] = useState(\"\");\n\n    const handleChangeSettings = (e) => {\n        setSettings({ ...settings, [e.target.name]: e.target.value });\n    };\n\n    const handleAddName = () => {\n        setNames((prevState) => prevState.concat(name));\n        setName(\"\");\n    };\n\n    const handleDeleteName = (nameToDelete) => {\n        setNames(names.filter((name) => name !== nameToDelete));\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.keyCode === 13) {\n            handleAddName();\n        }\n    };\n\n    return (\n        <Box\n            sx={{\n                display: \"flex\",\n                width: \"100%\",\n                justifyContent: \"center\",\n                color: theme.palette.getContrastText(\n                    theme.palette.background.default\n                ),\n            }}\n        >\n            <Box\n                sx={{\n                    maxWidth: \"100%\",\n                    width: \"600px\",\n                    p: 4,\n                    textAlign: \"center\",\n                }}\n            >\n                <Typography variant=\"h3\" sx={{ mb: 4 }}>\n                    Settings\n                </Typography>\n                <Typography>Minimum and Maximum Waiting Time</Typography>\n                <Slider\n                    name=\"minMaxMinutes\"\n                    value={settings.minMaxMinutes}\n                    onChange={handleChangeSettings}\n                    valueLabelDisplay=\"auto\"\n                    sx={{ mb: 2 }}\n                />\n                <Box\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        alignItems: \"center\",\n                        mb: 2,\n                    }}\n                >\n                    <Typography sx={{ flex: 1, textAlign: \"left\" }}>\n                        Maximum number of spinners:{\" \"}\n                    </Typography>\n                    <Select\n                        name=\"amtSpinners\"\n                        value={settings.amtSpinners}\n                        label=\"Spinners\"\n                        onChange={handleChangeSettings}\n                        variant=\"standard\"\n                    >\n                        <MenuItem value={1}>One</MenuItem>\n                        <MenuItem value={2}>Two</MenuItem>\n                        <MenuItem value={3}>Three</MenuItem>\n                        <MenuItem value={4}>Four</MenuItem>\n                    </Select>\n                </Box>\n                <Box\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        alignItems: \"center\",\n                        mb: 2,\n                    }}\n                >\n                    <Typography sx={{ flex: 1, textAlign: \"left\" }}>\n                        Add players:\n                    </Typography>\n                    <OutlinedInput\n                        value={name}\n                        placeholder=\"Name\"\n                        onChange={(e) => setName(e.target.value)}\n                        onKeyDown={handleKeyPress}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <IconButton onClick={handleAddName}>\n                                    <PersonAddIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        }\n                    />\n                </Box>\n                <Box\n                    sx={\n                        names.length === 0\n                            ? {\n                                  display: \"flex\",\n                                  border:\n                                      \"1px solid \" +\n                                      theme.palette.action.disabled,\n                                  borderRadius: 1,\n                                  alignItems: \"center\",\n                                  justifyContent: \"center\",\n                                  textAlign: \"center\",\n                                  minHeight: \"100px\",\n                                  mb: 2,\n                              }\n                            : {\n                                  border: \"1px solid\",\n                                  borderRadius: 1,\n                                  p: 1,\n                                  textAlign: \"left\",\n                                  minHeight: \"100px\",\n                                  mb: 2,\n                              }\n                    }\n                >\n                    {names.length > 0 ? (\n                        names.map((name, index) => (\n                            <Chip\n                                key={index}\n                                label={name}\n                                sx={{ mr: 1 }}\n                                color=\"primary\"\n                                onDelete={() => handleDeleteName(name)}\n                            />\n                        ))\n                    ) : (\n                        <Typography variant=\"h4\">No Players :(</Typography>\n                    )}\n                </Box>\n                <Button\n                    variant=\"outlined\"\n                    startIcon={<DeleteIcon />}\n                    onClick={() => setNames([])}\n                >\n                    Delete All\n                </Button>\n                <Fab\n                    color=\"primary\"\n                    variant=\"extended\"\n                    aria-label=\"add\"\n                    sx={{ position: \"absolute\", bottom: 16, right: 16 }}\n                    onClick={() => navigate(\"/\")}\n                >\n                    <LocalBarIcon sx={{ mr: 1 }} />\n                    Save and go back to game\n                </Fab>\n            </Box>\n        </Box>\n    );\n}\n","export const writeToSessionStorage = (key, value) => {\n    window.sessionStorage.setItem(key, value);\n};\n\nexport const readFromSessionStorage = (key) => {\n    return window.sessionStorage.getItem(key);\n};\n","import React, { useEffect, useState } from \"react\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport TopBar from \"./components/TopBar\";\nimport \"./App.css\";\nimport SpinnerPage from \"./pages/SpinnerPage\";\nimport Settings from \"./pages/Settings\";\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\nimport { writeToSessionStorage, readFromSessionStorage } from \"./utils/utils\";\nimport themes from \"./utils/themes.json\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nfunction App() {\n    const [names, setNames] = useState([]);\n    const [prevNames, setPrevNames] = useState([]);\n    const [settings, setSettings] = useState({\n        amtSpinners: 1,\n        minMaxMinutes: [15, 30],\n        theme: \"default\",\n    });\n    const [dataIsLoaded, setDataIsLoaded] = useState(false);\n    // const [theme, setTheme] = useState(themes.christmas);\n\n    useEffect(() => {\n        // Reads names and settings from sessionStorage\n        const readNames = JSON.parse(readFromSessionStorage(\"names\"));\n        const readSettings = JSON.parse(readFromSessionStorage(\"settings\"));\n        if (readNames) {\n            setNames(readNames);\n        }\n\n        if (JSON.stringify(readSettings) !== JSON.stringify(settings)) {\n            setSettings(readSettings);\n        }\n        setDataIsLoaded(true);\n        // eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        // Stores names in sessionStorage for each change\n        if (names) {\n            writeToSessionStorage(\"names\", JSON.stringify(names));\n        }\n    }, [names]);\n\n    useEffect(() => {\n        // Stores settings in sessionStorage for each change\n        writeToSessionStorage(\"settings\", JSON.stringify(settings));\n    }, [settings]);\n\n    if (dataIsLoaded) {\n        return (\n            <ThemeProvider theme={createTheme(themes[settings.theme])}>\n                <CssBaseline />\n                <TopBar\n                    prevNames={prevNames}\n                    setPrevNames={setPrevNames}\n                    settings={settings}\n                    setSettings={setSettings}\n                />\n                <HashRouter>\n                    <Routes>\n                        <Route\n                            path=\"/\"\n                            element={\n                                <SpinnerPage\n                                    names={names}\n                                    settings={settings}\n                                    prevNames={prevNames}\n                                    setPrevNames={setPrevNames}\n                                />\n                            }\n                        />\n                        <Route\n                            path=\"/settings\"\n                            element={\n                                <Settings\n                                    settings={settings}\n                                    setSettings={setSettings}\n                                    names={names}\n                                    setNames={setNames}\n                                />\n                            }\n                        />\n                    </Routes>\n                </HashRouter>\n            </ThemeProvider>\n        );\n    } else {\n        return <div>Loading...</div>;\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}