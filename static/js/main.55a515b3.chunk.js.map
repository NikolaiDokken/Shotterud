{"version":3,"sources":["views/Settings/NameChips.jsx","views/Settings/Settings.jsx","views/Shotterud/Spinner.jsx","index.js","views/Shotterud/Shotterud.jsx"],"names":["EnhancedTable","props","addName","useCallback","newName","document","querySelector","value","length","names","push","name","selected","setNames","filter","mapName","window","sessionStorage","setItem","JSON","stringify","useEffect","addEventListener","event","key","Grid","container","direction","spacing","item","justify","Typography","variant","TextField","id","label","Button","onClick","row","map","Chip","toUpperCase","onDelete","handleDelete","color","Transition","React","forwardRef","ref","Slide","Settings","handleToggle","setOpen","open","location","reload","Dialog","fullScreen","onClose","TransitionComponent","AppBar","style","position","Toolbar","IconButton","edge","aria-label","padding","width","xs","Slider","settings","minMaxSec","valueLabelDisplay","step","marks","min","max","onChange","e","setSettings","Select","amtSpinners","target","MenuItem","Spinner","spin","users","shuffled","loadout","$","nr","insert_times","duration_time","attr","scrollsize","diff","html","css","times","shuffle","i","append","Math","round","floor","random","animate","left","children","each","center","innerWidth","this","offset","text","arr","temp","index","counter","className","textAlign","disableBodyScroll","require","ReactDOM","render","storedNames","parse","getItem","storedAmtSpinners","storedMinMaxSec","useState","settingsOpen","setSettingsOpen","randomTime","callback","Promise","resolve","setTimeout","spinnerGenerator","percentage","doubleSpin","trippleSpin","amt","height","Array","fill","spinner","start","a","getElementById","marginTop","textTransform","bottom","right"],"mappings":"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","file":"static/js/main.55a515b3.chunk.js","sourcesContent":["import React, { useEffect, useCallback } from \"react\";\nimport { Chip, Grid, Typography, TextField, Button } from \"@material-ui/core\";\n\nexport default function EnhancedTable(props) {\n  const addName = useCallback(() => {\n    const newName = document.querySelector(\"#inputName\").value;\n    if (newName === \"\" || newName.length > 20) return;\n    props.names.push({ name: newName, selected: false });\n    props.setNames(props.names.filter(mapName => true));\n    document.querySelector(\"#inputName\").value = \"\";\n    window.sessionStorage.setItem(\"names\", JSON.stringify(props.names));\n  }, [props]);\n\n  const handleDelete = name => {\n    props.setNames(props.names.filter(mapName => mapName !== name));\n    window.sessionStorage.setItem(\n      \"names\",\n      JSON.stringify(props.names.filter(mapName => mapName !== name))\n    );\n  };\n\n  useEffect(() => {\n    document.querySelector(\"#inputName\").addEventListener(\n      \"keypress\",\n      function(event) {\n        // Number 13 is the \"Enter\" key on the keyboard\n        if (event.key === \"Enter\") {\n          addName();\n        }\n      },\n      true\n    );\n  }, [addName]);\n\n  return (\n    <Grid container direction=\"column\" spacing={4}>\n      <Grid container item justify=\"center\">\n        <Typography variant=\"h4\">Add Names</Typography>\n      </Grid>\n      <Grid container item justify=\"center\">\n        <TextField id=\"inputName\" label=\"Add name\"></TextField>\n        <Button variant=\"outlined\" onClick={addName}>\n          Add\n        </Button>\n      </Grid>\n      <Grid container item direction row justify=\"center\">\n        {props.names.map(name => (\n          <Chip\n            label={name.name.toUpperCase()}\n            onDelete={() => handleDelete(name)}\n            color=\"primary\"\n          />\n        ))}\n      </Grid>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport {\n  Grid,\n  Typography,\n  Dialog,\n  Slide,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Slider,\n  MenuItem,\n  Select\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport NameChips from \"./NameChips\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function Settings(props) {\n  const handleToggle = () => {\n    props.setOpen(!props.open);\n    window.location.reload();\n  };\n\n  return (\n    <Dialog\n      fullScreen\n      open={props.open}\n      onClose={handleToggle}\n      TransitionComponent={Transition}\n    >\n      <AppBar style={{ position: \"relative\" }}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={handleToggle}\n            aria-label=\"close\"\n          >\n            <CloseIcon />\n          </IconButton>\n          <Typography variant=\"h6\">Settings</Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid\n        container\n        direction=\"column\"\n        style={{ padding: \"16px\", width: \"inherit\" }}\n        spacing={4}\n      >\n        <Grid item xs>\n          <Typography>Minimum/Maximum time (min) before spin</Typography>\n          <Slider\n            value={props.settings.minMaxSec}\n            valueLabelDisplay=\"auto\"\n            step={0.5}\n            marks\n            min={0.5}\n            max={20}\n            onChange={(e, value) => {\n              props.setSettings({\n                ...props.settings,\n                minMaxSec: value\n              });\n              window.sessionStorage.setItem(\n                \"minMaxSec\",\n                JSON.stringify(props.settings.minMaxSec)\n              );\n            }}\n          />\n        </Grid>\n        <Grid item xs>\n          <Typography>Max amt. of spinners</Typography>\n          <Select\n            value={props.settings.amtSpinners}\n            onChange={e => {\n              props.setSettings({\n                ...props.settings,\n                amtSpinners: e.target.value\n              });\n              window.sessionStorage.setItem(\n                \"amtSpinners\",\n                JSON.stringify(e.target.value)\n              );\n            }}\n          >\n            <MenuItem value={1}>1</MenuItem>\n            <MenuItem value={2}>2</MenuItem>\n            <MenuItem value={3}>3</MenuItem>\n            <MenuItem value={4}>4</MenuItem>\n          </Select>\n        </Grid>\n        <Grid item xs>\n          <NameChips names={props.names} setNames={props.setNames} />\n        </Grid>\n      </Grid>\n    </Dialog>\n  );\n}\n","import React, { useEffect, useCallback } from \"react\";\nimport $ from \"jquery\";\nimport \"./Spinner.css\";\n\nexport default function Spinner(props) {\n  const spin = useCallback(() => {\n    var users = props.names.map(name => name.name),\n      shuffled = [],\n      loadout = $(\"#loadout\" + props.nr),\n      insert_times = 30,\n      duration_time = 10000;\n\n    $(\"#roll\" + props.nr).attr(\"disabled\", true);\n    var scrollsize = 0,\n      diff = 0;\n    $(loadout).html(\"\");\n    $(\"#log\" + props.nr).html(\"\");\n    loadout.css(\"left\", \"100%\");\n    if (users.length < 10) {\n      insert_times = 20;\n      duration_time = 5000;\n    } else {\n      insert_times = 10;\n      duration_time = 10000;\n    }\n    for (var times = 0; times < insert_times; times++) {\n      shuffled = users;\n      shuffle(shuffled);\n      for (var i = 0; i < users.length; i++) {\n        loadout.append(\n          '<td><div class=\"roller\"><div>' + shuffled[i] + \"</div></div></td>\"\n        );\n        scrollsize = scrollsize + 192;\n      }\n    }\n\n    diff = Math.round(scrollsize / 2);\n    diff = randomEx(diff - 300, diff + 300);\n    $(\"#loadout\" + props.nr).animate(\n      {\n        left: \"-=\" + diff\n      },\n      duration_time,\n      function() {\n        $(\"#roll\" + props.nr).attr(\"disabled\", false);\n        $(\"#loadout\" + props.nr)\n          .children(\"td\")\n          .each(function() {\n            var center = window.innerWidth / 2;\n            if (\n              $(this).offset().left < center &&\n              $(this).offset().left + 185 > center\n            ) {\n              var text = $(this)\n                .children()\n                .text();\n              $(\"#log\" + props.nr).append(\n                'Skål <span class=\"badge\">' + text + \"!</span>\"\n              );\n              $(\"#prev-names\").append(\"<div>\" + text + \"</div>\");\n            }\n          });\n      }\n    );\n  }, [props]);\n\n  function randomEx(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  function shuffle(arr) {\n    var counter = arr.length,\n      temp,\n      index;\n    while (counter > 0) {\n      index = (Math.random() * counter--) | 0;\n      temp = arr[counter];\n      arr[counter] = arr[index];\n      arr[index] = temp;\n    }\n  }\n\n  useEffect(() => {\n    spin();\n  }, [spin]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row topbox\">\n        <div className=\"col-md-6 col-md-offset-3 rollbox\">\n          <div className=\"line\"></div>\n          <table>\n            <tr className=\"loadout\" id={\"loadout\" + props.nr}></tr>\n          </table>\n        </div>\n      </div>\n\n      <div className=\"col-md-12\" style={{ textAlign: \"center\" }}>\n        <div className=\"log\" id={\"log\" + props.nr}></div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Shotterud from \"./views/Shotterud/Shotterud\";\n\nconst bodyScrollLock = require(\"body-scroll-lock\");\nconst disableBodyScroll = bodyScrollLock.disableBodyScroll;\n\nconst targetElement = document.querySelector(\"#root\");\n\n// 3. ...in some event handler after showing the target element...disable body scroll\ndisableBodyScroll(targetElement);\n\nReactDOM.render(<Shotterud />, document.getElementById(\"root\"));\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Button, Typography, Grid, AppBar } from \"@material-ui/core\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\nimport LocalBarIcon from \"@material-ui/icons/LocalBar\";\nimport Settings from \"../Settings/Settings\";\nimport Spinner from \"./Spinner\";\nimport \"./Shotterud.css\";\n\nexport default function Shotterud(props) {\n  var storedNames = JSON.parse(sessionStorage.getItem(\"names\"));\n  var storedAmtSpinners = JSON.parse(sessionStorage.getItem(\"amtSpinners\"));\n  var storedMinMaxSec = JSON.parse(sessionStorage.getItem(\"minMaxSec\"));\n  const [names, setNames] = useState(storedNames !== null ? storedNames : []);\n  const [settings, setSettings] = useState({\n    amtSpinners: storedAmtSpinners !== null ? storedAmtSpinners : 1,\n    minMaxSec: storedMinMaxSec !== null ? storedMinMaxSec : [10, 15]\n  });\n  const [settingsOpen, setSettingsOpen] = useState(false);\n\n  const randomTime = useCallback(\n    callback => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          callback();\n          resolve();\n        }, (Math.random() * (settings.minMaxSec[1] * 60 - settings.minMaxSec[0] * 60) + settings.minMaxSec[0] * 60) * 1000);\n      });\n    },\n    [settings.minMaxSec]\n  );\n\n  const spinnerGenerator = useCallback(() => {\n    var percentage = Math.random() * 101;\n    var doubleSpin = percentage > 80 && settings.amtSpinners >= 2;\n    var trippleSpin = percentage > 92 && settings.amtSpinners >= 3;\n    var quadroupleSpin = percentage > 96 && settings.amtSpinners >= 4;\n    var amt = 1;\n    if (quadroupleSpin) amt = 4;\n    else if (trippleSpin) amt = 3;\n    else if (doubleSpin) amt = 2;\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        style={{ height: \"100%\" }}\n        spacing={4}\n      >\n        {Array(amt)\n          .fill()\n          .map((spinner, index) => (\n            <Grid item>\n              <Spinner names={names} nr={index} />\n            </Grid>\n          ))}\n      </Grid>\n    );\n  }, [names, settings]);\n\n  const start = useCallback(\n    async function() {\n      while (true) {\n        await randomTime(() => {\n          if (names.length > 1) {\n            ReactDOM.render(\n              spinnerGenerator(),\n              document.getElementById(\"spinners\")\n            );\n            setTimeout(() => {\n              ReactDOM.render(\"\", document.getElementById(\"spinners\"));\n            }, 25000);\n          }\n        });\n      }\n    },\n    [names, randomTime, spinnerGenerator]\n  );\n\n  useEffect(() => {\n    start();\n  }, [start]);\n\n  return (\n    <div>\n      <AppBar style={{ height: \"26px\" }}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          style={{ height: \"100%\" }}\n        >\n          <Grid item container direction=\"row\" justify=\"flex-end\">\n            <Grid item xs container id=\"prev-names\" justify=\"flex-end\"></Grid>\n            <Grid item>\n              <ArrowBack />\n              <LocalBarIcon />\n            </Grid>\n          </Grid>\n        </Grid>\n      </AppBar>\n      <div\n        id=\"spinners\"\n        style={{ height: \"100%\", width: \"100%\", position: \"absolute\" }}\n      ></div>\n      {names.length < 2 ? (\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          style={{ marginTop: \"100px\" }}\n        >\n          <Typography variant=\"h5\" style={{ textTransform: \"uppercase\" }}>\n            Add more than 1 player\n          </Typography>\n        </Grid>\n      ) : null}\n      <Button\n        variant=\"outlined\"\n        onClick={() => setSettingsOpen(true)}\n        style={{ position: \"absolute\", bottom: \"4px\", right: \"4px\" }}\n      >\n        Settings\n      </Button>\n      <Settings\n        open={settingsOpen}\n        setOpen={setSettingsOpen}\n        names={names}\n        setNames={setNames}\n        settings={settings}\n        setSettings={setSettings}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}